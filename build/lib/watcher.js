// Generated by CoffeeScript 1.10.0
(function() {
  var RobinHoodWatcher, Robot, Spooky, _, config, https, robotId,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Spooky = require('spooky');

  config = require('config');

  _ = require('underscore');

  https = require("https");

  RobinHoodWatcher = (function() {
    function RobinHoodWatcher(url, options) {
      var baseUrl, eventId, eventName;
      this.url = url;
      this.options = options;
      this.readData = bind(this.readData, this);
      eventName = _(this.url.split("/")).chain().compact().reverse().value()[0];
      eventId = eventName.split("-")[0];
      baseUrl = this.url.split("https://")[1].split("/")[0];
      this.requestOptions = {
        host: baseUrl,
        path: "/LiveFeed/GetGame?id=" + eventId + "&lng=ru&cfview=0"
      };
      this.readData();
    }

    RobinHoodWatcher.prototype.readData = function() {
      return https.get(this.requestOptions, (function(_this) {
        return function(response) {
          var body;
          body = "";
          response.on('data', function(chunk) {
            return body += chunk;
          });
          return response.on('end', function() {
            var data, obj;
            data = JSON.parse(body);
            if (data['Value']) {
              obj = {
                p1: data['Value']['Events'][0]['C'],
                p2: data['Value']['Events'][1]['C'],
                locked: {
                  p1: data['Value']['Events'][0]['B'],
                  p2: data['Value']['Events'][1]['B']
                }
              };
              _this.options.onStep(obj);
              return setTimeout(_this.readData, 5000);
            } else {
              return _this.options.onFinish(data);
            }
          });
        };
      })(this));
    };

    return RobinHoodWatcher;

  })();

  module.exports = RobinHoodWatcher;

  robotId = process.argv[2];

  if (robotId) {
    Robot = require('../models/robot');
    Robot.findById(robotId).then(function(robot) {
      var processUrl;
      processUrl = robot.get('url');
      return new RobinHoodWatcher(processUrl, {
        onStep: function(obj) {
          var baseData, gameData;
          gameData = robot.get('gameData');
          baseData = gameData ? JSON.parse(gameData) : [];
          console.log(baseData);
          baseData.push(obj);
          robot.set({
            gameData: JSON.stringify(baseData)
          });
          return robot.save();
        },
        onFinish: function() {
          robot.set({
            state: 'done'
          });
          robot.save();
          return console.log('FINISH');
        }
      });
    });
  }

}).call(this);
