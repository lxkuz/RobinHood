// Generated by CoffeeScript 1.10.0
(function() {
  var MatchDataFactory,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  MatchDataFactory = (function() {
    function MatchDataFactory(options) {
      if (options == null) {
        options = {};
      }
      this.isLocked = bind(this.isLocked, this);
      this.bookmakerNormalize = bind(this.bookmakerNormalize, this);
      this.koefData = bind(this.koefData, this);
      this.buildGamesData = bind(this.buildGamesData, this);
      this.build = bind(this.build, this);
      this.koef = options.koef;
      this.delta = options.delta;
      this.safeKoef = options.safeKoef;
      this.stepsCount = options.stepsCount;
    }

    MatchDataFactory.prototype.build = function(n) {
      var it, last, res, val;
      if (n == null) {
        n = this.stepsCount;
      }
      it = 0;
      val = this.koef;
      res = [this.koefData(val)];
      while (it < n) {
        val = val + (2.0 * Math.random() - 1.0) * this.delta;
        val = this.normalizeKoef(val);
        res.push(this.koefData(val));
        it += 1;
      }
      last = res[res.length - 1];
      last.win = Math.random() <= last.k;
      return res;
    };

    MatchDataFactory.prototype.buildGamesData = function(stepsCount, gamesCount) {
      var gamesData, it;
      gamesData = [];
      it = 0;
      while (it < gamesCount) {
        gamesData.push(this.build(stepsCount));
        it += 1;
      }
      return gamesData;
    };

    MatchDataFactory.prototype.koefData = function(p1Koef) {
      var p2Koef;
      p2Koef = 1.0 - p1Koef;
      return {
        k: p1Koef,
        p1: this.bookmakerNormalize(p1Koef),
        p2: this.bookmakerNormalize(p2Koef),
        locked: {
          p1: this.isLocked(p1Koef),
          p2: this.isLocked(p2Koef)
        }
      };
    };

    MatchDataFactory.prototype.bookmakerNormalize = function(v) {
      var val;
      val = this.toFixed(1.0 / (v / this.safeKoef), 2);
      return Math.max(Math.min(val, 100), 1.01);
    };

    MatchDataFactory.prototype.isLocked = function(koef) {
      return this.bookmakerNormalize(koef) <= 1.01;
    };

    MatchDataFactory.prototype.normalizeKoef = function(k) {
      return Math.min(Math.max(k, 0.0), 1.0);
    };

    MatchDataFactory.prototype.toFixed = function(num, fixed) {
      if (!fixed) {
        fixed = 0;
      }
      fixed = parseFloat(Math.pow(10, fixed));
      return Math.floor(num * fixed) / fixed;
    };

    return MatchDataFactory;

  })();

  module.exports = MatchDataFactory;

}).call(this);
