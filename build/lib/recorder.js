// Generated by CoffeeScript 1.10.0
(function() {
  var Koef, Recorder, SportEvent,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  SportEvent = sequelize.define('sport_event', {
    id: {
      type: Sequelize.INTEGER,
      primaryKey: true
    },
    name: Sequelize.STRING,
    url: Sequelize.TEXT
  }, {
    freezeTableName: true
  });

  Koef = sequelize.define('koef', {
    id: {
      type: Sequelize.INTEGER,
      primaryKey: true
    },
    p1: Sequelize.FLOAT,
    p2: Sequelize.FLOAT,
    x: Sequelize.FLOAT,
    sport_event_id: Sequelize.INTEGER
  }, {
    freezeTableName: true,
    define: {
      timestamps: true
    }
  });

  Koef.belongsTo(SportEvent);

  SportEvent.hasMany(Koef);

  SportEvent.sync().then((function(_this) {
    return function() {
      console.log('SportEvent.sync() then');
      SportEvent.create({
        url: 'http://google.com',
        name: 'test1'
      });
      return SportEvent.create({
        url: 'http://google.com',
        name: 'test2'
      });
    };
  })(this));

  Recorder = (function() {
    function Recorder() {
      this.getData = bind(this.getData, this);
      this.push = bind(this.push, this);
    }

    Recorder.prototype.push = function(url, data) {
      SportEvent.sync().then((function(_this) {
        return function() {
          return SportEvent.findAll({
            where: {
              url: data.url
            }
          }).then(function(results) {
            var sportEvent;
            sportEvent = results[0];
            if (!sportEvent) {
              SportEvent.create({
                url: data.url,
                name: data.name
              });
            }
            return end;
          });
        };
      })(this));
      console.log('push recorder');
      console.log(data);
      data["url"] = url;
      if (!this.last || (this.last.url !== data.url) || (data.p1 !== this.last.p1) || (data.p2 !== this.last.p2)) {
        this.events.insert(data);
        return this.last = data;
      }
    };

    Recorder.prototype.getData = function(callback) {
      var event, i, len, name, ref, res, results1;
      SportEvent.sync().then((function(_this) {
        return function() {
          return DataK.sync();
        };
      })(this)).then((function(_this) {
        return function() {};
      })(this));
      res = {};
      ref = SportEvent.findAll;
      results1 = [];
      for (i = 0, len = ref.length; i < len; i++) {
        event = ref[i];
        results1.push(name = event.get('name'));
      }
      return results1;
    };

    return Recorder;

  })();

  module.exports = new Recorder;

}).call(this);
